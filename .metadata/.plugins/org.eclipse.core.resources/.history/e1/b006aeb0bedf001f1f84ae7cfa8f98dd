package com.helper;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;

public class TransictionProvider {
    private static EntityManagerFactory emf = Persistence.createEntityManagerFactory("dev");

    // Use ThreadLocal for transactions but allow fresh EntityManager when needed
    private static ThreadLocal<EntityManager> threadLocal = new ThreadLocal<>();

    public static EntityManager getEntityManager() {
        EntityManager em = threadLocal.get();
        if (em == null || !em.isOpen()) {
            em = emf.createEntityManager();
            threadLocal.set(em);
        }
        return em;
    }

    // âœ… New method to return a fresh EntityManager
    public static EntityManager getNewEntityManager() {
        return emf.createEntityManager();
    }

    public static EntityTransaction getTransaction() {
        return getEntityManager().getTransaction();
    }

    public static void closeEntityManager() {
        EntityManager em = threadLocal.get();
        if (em != null) {
            em.close();
            threadLocal.remove();
        }
    }

    public static void closeEntityManagerFactory() {
        if (emf != null) {
            emf.close();
        }
    }
}
